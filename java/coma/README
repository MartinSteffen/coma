1.Datenbank:
  Coma schraenkt sich nicht auf ein bestimmtes Datenbanksystem ein.
  Sie koennen ihr vorhandenes Datenbanksystem verwenden, solange es
  das mitgelieferte SQL-Script unterstuetzt (in der Entwicklungsphase
  von Coma wurde MySQL 3.x verwendet). 
  
2.Test:
  2.1 coma.handler.db.impl.*
    Zum Testen der Klassen dieses Packets muss die Methode
    coma.handler.db.impl.Service#getConnection() an die 
    vorhandene Testumgebung angepasst werden. Es mussen also
    die Angaben zum verwendeten Datenbank angepasst werden.
    
  a. ReadServiceImpl:
     Zum Testen dieser Klasse ist die Klasse coma.util.test.ReadServiceTest
     vorgesehen. Hierfuer muessen noch, je nach Testfall, die Testmethoden
     um einigen Testdaten erweitert werden.
  b. InsertService:
     Hierfuer ist die Klasse coma.util.test.InsertServiceTest vorgesehen.
  c. UpdateService:
     Hierfuer ist die Klasse coma.util.test.UpdateServiceTest vorgesehen.
     
3. Build Coma:
   Um eine Installation von Coma durchzufuehren, empfiehlt es sich das
   dafuer vergesehene Ant-Script zu benutzen.
   Davor muessen folgende Umgebungsvariablen gesetzt werden:
   - CATALINA_HOME // wo tomcat installiert ist
   - LIB_HOME // wo er die noetigen jars suchen soll
   - WEBAPPS_HOME // wo soll die Anwendung installiert werden
   Anschliessend sind folgende Befehle durchzufuehren:
   
   a. $>ant install : macht die eigentliche Instalation
   b. $>ant clean: loecht die temporaer erzeugten Verzeichnisse
   c. $CATALINA_HOME/bin/catalina.sh stop : wenn Tomcat vor der Instalation lief
   d. $CATALINA_HOME/bin/catalina.sh start.
   
   Um nur den Source-Code zu rekompilieren ist der Target 'compile' zu benutzen:
     $>ant compile
   Um nur Javadoc zu generieren ist der Target 'doc' zu benutzen:
     $>ant doc
     
   Benoetigten jar-Dateien:
   - log4j.xx.jar
   - servlet.xx.jar
   - junit.xx.jar
   - mysql-connector.xx.jar
   - cos.jar