%!PS-Adobe-2.0
%%Creator: dvips(k) 5.94a Copyright 2003 Radical Eye Software
%%Title: spec-uml-data.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips spec-uml-data
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.11.16:1205
%%BeginProcSet: texc.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158278 55380994 1000 600 600 (spec-uml-data.dvi)
@start
%DVIPSBitmapFont: Fa ectt0900 9 3
/Fa 3 98 df<387FFFF0B512F8A314F000FCC7FCB3B3ACB512F014F8A36C13F0153A71B3
27>91 D<387FFFF0B512F8A37EEA0001B3B3ACEA7FFFB5FCA36C13F0153A7EB327>93
D<3801FFE0000713F84813FE486D7E81EBC07FEC0FE0380F8007D802007FC71203A2EB07
FF137F0003B5FC120F5A383FFC03EA7FE0130012FE5AA46C1307007F130FEBC07F6CB612
C06C15E07E000313F83A007FC03FC023207D9F27>97 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb ecrm0900 9 24
/Fb 24 122 df<123C127EB4FCA21380A2127F123D1201A412031300A25A1206120E120C
121C5A5A126009177A8715>44 D<123C127E12FFA4127E123C08087A8715>46
D<123C127E12FFA4127E123C1200B0123C127E12FFA4127E123C08207A9F15>58
D<D8FFFE91381FFFF87F80C6030013006E143CD9DFE01418EBCFF0A2EBC7F8EBC3FCA2EB
C1FEEBC0FF6E7EA26E7E6E7EA26E7E6E7E6E7EA26E7E6E7EA2ED7F80ED3FC0ED1FE0A2ED
0FF0ED07F8A2ED03FCED01FEED00FFA2EE7F98EE3FD8A2EE1FF8160F1607A216031601A2
486C1400D807F81578B500C01438A2171835337EB23A>78 D<007FB712FEA390398007F0
01D87C00EC003E0078161E0070160EA20060160600E01607A3481603A6C71500B3AB4A7E
011FB512FCA330337DB237>84 D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E
6E7EA26E7EEA1F00C7FCA4EB01FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F1300
4815C05AA3140FA26C131F6C133B3A3F8071F180391FC1E1FF2607FFC013003900FE003C
22237DA126>97 D<EA03F012FFA312071203AEEC3F80ECFFE09038F3C0F89038F7007E01
FE7F49EB1F8049EB0FC05BED07E016F0A2150316F8AA16F0150716E0A2ED0FC07F6DEB1F
8001ECEB3F0001CF137C90388381F8903801FFE0C76CC7FC25357EB32B>I<EB07F8EB3F
FF9038FC07C03901F000E03903E003F03807C007120FEA1F80123F90380003E04890C7FC
A2127E12FEAA127FA26C14187F001F14386D1330000F14706C6C13E03903F001C03900FC
0F8090383FFE00EB07F01D237EA122>I<153FEC0FFFA3EC007F81AEEB07F0EB3FFCEBFC
0F3901F003BF3907E001FF48487E48487F8148C7FCA25A127E12FEAA127E127FA27E6C6C
5BA26C6C5B6C6C4813803A03F007BFFC3900F81E3FEB3FFCD90FE0130026357DB32B>I<
EB0FE0EB7FFCEBF83F3903F00F80D807E013C0390FC007E0381F800315F0EA3F00140148
14F8127EA212FEA2B6FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C
6C13E03901F003C03900FC0F00EB3FFEEB07F01D237EA122>I<EB01FCEB07FF90381F07
8090383E0FC0EB7C1F13FCEA01F8A20003EB070049C7FCACB512F0A3D803F0C7FCB3A748
7E387FFFE0A31A357FB417>I<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0FC90
38F3807C9038F7007E13FE497FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B>
104 D<EA0780EA0FC0EA1FE0A4EA0FC0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0F
F0B5FCA310337EB215>I<EA07E012FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>
108 D<2703F01FE013FF00FF90267FF80313C0903BF1E07C0F03E0903BF3803E1C01F028
07F7003F387FD803FE1470496D486C7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFF
F0A33C217EA041>I<3903F01FC000FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03
FE497FA25BA25BB3486CEB7F80B538C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F
803901F007C03903C001E000078048486C7E48C7127CA248147E003E143E007E143FA300
FE1580A8007E1500A36C147EA26C147C6D13FC6C6C485A00075C3903F007E03900FC1F80
D93FFEC7FCEB07F021237EA126>I<3903F03F8000FFEBFFE09038F3C0F89038F7007ED8
07FE7F6C48EB1F804914C049130F16E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D
131F6DEB3F80160001FF13FC9038F381F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0
A325307EA02B>I<3803E07C38FFE1FF9038E38F809038E71FC0EA07EEEA03ECA29038FC
0F8049C7FCA35BB2487EB512E0A31A217FA01E>114 D<EBFF06000713CE381F00FE003C
133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFFC014F0000F7F6C7FC67F
EB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C130E6C5B38F7807838E1FFE0
38C07F8019237EA11E>I<1330A51370A313F0A21201A212031207381FFFFEB5FCA23803
F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0182F7FAD1E>I<B5EBFF
F0A3D80FF0EB3F800007EC1F000003140E150C6D131C00011418A26C6C5BA26D1370017E
1360137F6D5BA290381F8180A214C3010F90C7FCA2EB07E6A214FE6D5AA26D5AA36D5AA2
146024217E9F29>118 D<B53A1FFF81FFF0A33C07F801FC003F8001F049EB1E00000301
00141C816C6C017C1318A26D017E1338000002FE1330A290267E01FF5B159F168090263F
030F5BA216C0903A1F8607C180A202C613E390260FCC0390C7FCA2D907FC13F6ECF80116
FE6D486C5AA36D481378A36D48133034217F9F37>I<3A7FFF807FF8A33A07F8001FC000
03EC0F800001EC070015066C6C5BA26D131C017E1318A26D5BA2EC8070011F1360ECC0E0
010F5BA2903807E180A214F3010390C7FC14FBEB01FEA26D5AA31478A21430A25CA214E0
5CA2495A1278D8FC03C8FCA21306130EEA701CEA7838EA1FF0EA0FC025307F9F29>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc ecrm0600 6 1
/Fc 1 49 df<13FF000313C0380781E0380F00F0001E137848133CA248131EA400F8131F
AD0078131EA2007C133E003C133CA26C13786C13F0380781E03803FFC0C6130018227DA0
1E>48 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd ecrm1095 10.95 48
/Fd 48 123 df<DA03FFEB0FE0021F9038C07FF8913AFE00F1F81CD901F890383BE07ED9
07E090387FC0FF90390FC001FFD91F805CD93F005C5B017E167E01FE6D48130049147EAE
B91280A3D800FCC7007EC7FCB3AE486C14FF277FFFF83F13FFA338407FBF35>27
D<EC03FE91381FFFC09138FE01E0903901F80078D907E0131C4948137C494813FE90383F
00015B137E13FE496D5A167893C7FCAB167EB712FEA33900FC00011500167EB3AC486C14
FF277FFFF83F13FCA32E407FBF32>I<EB03C0A2805CA600F0140F00FC143F00FE147F00
FF14FF393FC3C3FC390FE187F03903F18FC03900FDBF00EB3FFCEB0FF0EB03C0EB0FF0EB
3FFCEBFDBF3903F18FC0390FE187F0393FC3C3FC39FF03C0FF00FE147F00FC143F00F014
0F00001400A6805CA220277AC32D>42 D<121C127FEAFF80A5EA7F00121C0909788819>
46 D<EB03FC90381FFF8090383E07C09038F801F048486C7E4848137C49133C0007143E
48487FA248C7EA0F80A24815C0A4007EEC07E0A500FE15F0B3A3007E15E0A4007F140F6C
15C0A46C15806D131F000F1500A26C6C133EA26C6C5B6C6C5B6C6C485A90383E07C06DB4
5AD903FCC7FC243F7CBC2D>48 D<14C013031307131F137FEA07FFB5FC139FEAF81F1200
B3B3ACEB7FF0B612F8A31D3D78BC2D>I<121C127FEAFF80A5EA7F00121CC7FCB3A3121C
127FEAFF80A5EA7F00121C092778A619>58 D<1507A34B7EA24B7EA34B7EA34B7E156FA2
EDCFF815C7A291380187FC1583A291380301FEA391380600FFA2020E80020C137FA2021C
800218133FA24A80161FA24A80160FA24A6D7EA349486D7E91B6FC4981A291C712014981
010680A24982177FA24982173FA2496F7EA21370717E13F0000183487ED80FFEED3FFEB5
00C00107B512F8A33D417DC044>65 D<B712FCEEFFC017F0C69039C0000FFC6D48EB03FE
EE00FFEF7F80EF3FC018E0171F18F0170F18F8A718F0171F18E0173F18C0EF7F80EFFF00
EE03FEEE0FF8EE7FE091B6C7FC17E09139800003FCEE00FEEF7F80EF3FC0EF1FE0EF0FF0
18F8170718FC1703A218FEA718FC1707A2EF0FF818F0171FEF3FE0EF7FC0933801FF8049
6C90380FFE00B85A17E094C7FC373E7DBD40>I<DB3FF0130C912603FFFE131C021FEBFF
80913A7FE00FC03C913AFF0001F07CD903FCEB0078D907F0EC3CFCD91FE0140F49481407
4948140349C8FC4848150149150012034848167CA24848163CA24848161CA2123F5B180C
127FA349160012FFAC127F7F180CA2123FA27F001F171C18186C7EA26C6C163818306C6C
1670000117606D16E06C6CED01C06D6CEC03806D6C14076D6CEC0F00D907F0141ED903FC
5CD900FF14F091397FE007E0021FB51280020349C7FC9138003FF036427BBF41>I<B912
80A3C69038C000036D48EB003FEF1FC017071703A21701A31700A41860A21630A31800A3
1670A216F01501150791B5FCA3EC8007150115001670A21630A693C8FCAFEBFFE0B612F0
A3333E7DBD3B>70 D<DB3FF0130C912603FFFE131C021FEBFF80913A7FE00FC03C913AFF
0001F07CD903FCEB0078D907F0EC3CFCD91FE0140F494814074948140349C8FC48481501
49150012034848167CA24848163CA24848161CA2123F5B180C127FA34993C7FC12FFAB04
1FB512F0127F7F9339000FFE00EF03FC123FA27F121FA26C7EA26C7EA26C7E6C7EA26C7E
6D6C14076D7E6D6C140FD907F8141C6D6CEC387CD900FFECF03C913A7FF007E01C021FB5
EA800C020349C8FC9138003FF03C427BBF47>I<B612C0A30001EBE00038007F80B3B3B2
3801FFE0B612C0A31A3E7DBD21>73 D<B612F0A3C601E0C8FCEB7F80B3B01703A5170717
06A4170EA3171EA2173E177E17FEEE01FC1607496C133FB8FCA3303E7DBD38>76
D<B56C93381FFFF06E5EA2C6F1F000D96FE0EE6FE0A2D967F016CFA3D963F8ED018FA2D9
61FCED030FA3D960FE1506A2027F150CA36E6C1418A36E6C1430A26E6C1460A36E6C14C0
A26E6CEB0180A36E6CEB0300A26E6C1306A3037F5BA26F6C5AA36F6C5AA26F6C5AA36F6C
5AA2923803F980A36FB4C7FCA26F5AA213F0486C147CD807FE4D7EB500F00138011FB512
F0A34C3E7DBD53>I<EDFFE0020713FC91393FC07F809139FE000FE0D901F8EB03F0D907
E0EB00FC4948147E49488049C86C7E017E6F7E01FE8248486F7E48486F7EA248486F7EA2
48486F7E001F83A24982003F1880A3007F18C049163FA300FF18E0AC007F18C06D167FA4
003F18806D16FF001F1800A36C6C4B5AA26C6C4B5A00035F6D150700015F6C6C4B5A017F
4B5A6D6C4A5A011F93C7FCD90FE014FE6D6C495AD901F8EB03F0D900FEEB0FE091393FC0
7F80912607FFFCC8FC020013E03B427BBF46>79 D<B712F016FF17C0C69039C0003FF06D
48EB07F8EE01FE707E831880EF3FC0A2EF1FE0A218F0A818E0A2EF3FC0A2EF7F80180017
FEEE03FC4C5AEE3FE091B6128004FCC7FC0280C9FCB3A7497EB612C0A3343E7DBD3D>I<
B712C016FCEEFF80C69039C0007FE06D48EB0FF0EE03FC707E707E717E717EA284171F84
A760173F6060177F4DC7FCEE01FC4C5AEE0FE0EEFF8091B500FCC8FC5E91388000FFEE3F
C0EE0FE0707E707E83707EA2707EA684A7190618C0177FA2190E496C91383FE00CB600C0
011F131C94380FF038943807F870CA3801FFE09438003F803F407DBD43>82
D<D907FC131890393FFF803890B512E03A01FC03F8783903F0007CD807C0EB1EF8484813
0F48C71207481403003E1401007E1400A2007C157812FCA21638A36C1518A27EA26C6C14
007F7FEA3FF813FF6C13F06C13FF15F06C14FC0001806CECFF80013F14C0010714E0EB00
7F020713F09138007FF8151FED0FFC15071503ED01FEA200C01400A3167EA27EA3167C7E
16FC6C15F86C14016C15F06C14036DEB07E0D8FBE0EB0FC0D8F1F8EB1F80D8F07FEB7F00
39E01FFFFC010713F039C0007FC027427BBF32>I<003FB9FCA3D9E000EBC00190C7397F
80003F007EEF1F80007C170F0078170700701703A300601701A548EF00C0A5C81600B3B2
4B7E4A7F0107B612F8A33A3E7DBD41>I<B600C090387FFFF8A3C601C0C7000313006D48
EC00FC18781830B3B3A4013F16706E1560A218E0011F5E6E1401130F6E4A5A01074BC7FC
6D6C5C6D6C140E6D6C143C027F5C91393FC001F091390FF00FE00203B51280020049C8FC
ED1FF03D407DBD44>I<EAFFFEA2EAFC00B3B3B3B3AFEAFFFEA20F5B78C319>91
D<EAFFFEA2EA007EB3B3B3B3AFEAFFFEA20F5B7FC319>93 D<EB1FF0EBFFFC3803E03F39
0F000FC0001C6D7E001F6D7E486C6C7E6D6C7EA3157E6C5A6CC7FCC8FCA4EC1FFEEB03FF
90381FF87EEB7F803801FC00EA07F0485A485A485A127F90C7FC160312FEA315FEA21401
007F14BE14033A3F80071F06261FC00E138E3A0FF03C0FFC3A03FFF007F83A003FC003E0
282A7CA82D>97 D<EA01F812FFA3120712031201B1EC07F8EC1FFF9138780FC09039F9E0
03F09039FB8001F801FFC77E49147E4980EE1F805B17C0160F17E0A2160717F0AA17E016
0FA317C0161F17806DEC3F007F01F6147E01F75C9039E38001F89039C1C003E09039C0F8
1F809026803FFEC7FCC7EA07F02C407EBE32>I<49B4FC010F13E090383F00F8017C131E
484813074848131F4848EB3F804848137FA2485AA248C7EA3F00151E4891C7FCA2127E12
FEAB127FA36C15C07F001F14016D1480000F14036C6CEB07006C6C13066C6C131E6C6C13
3890383F01F090380FFFC0D901FEC7FC222A7DA828>I<ED01F815FFA3150715031501B1
14FF010713C190381F80F190387C00394848131D4848130F4848130748481303A2484813
01123F90C7FC5AA3127E12FEAA127E127FA27E7F001F1403A26C6C13076C6C130F6C6CEB
0DFC6C6CEB3DFE6C6C903871FFF090383F01E190380FFF81903A01FE01F8002C407DBE32
>I<EB03FC90381FFF8090387E07E09038F801F048486C7E4848137C48487F000F143F48
487F168048C7FC150F5A16C0127EA212FEA2B7FCA248C9FCA6127E127FA36C15C07F001F
14016C6C148015036C6CEB07006C6C130E6C6C5B6C6C5B90383F01F090380FFFC0D901FE
C7FC222A7DA828>I<EC1FC0ECFFF0903803F038903807C0FC90380F81FE131FEB3F0113
3E137EEC00FC491300AFB6FCA3D800FCC7FCB3AE487E387FFFFEA31F407FBF1C>I<167E
903903FC01FF903A0FFF07878090393E07CE0F9038FC03FC3901F801F83B03F000FC0700
49017CC7FC0007147EA248487FA86C6C137EA20003147C6D13FC6C6C485A6D485A9038BE
07C026038FFFC8FCEB03FC48CAFCA47FA27F6C7E90B512F06C14FE6F7E6C6C14E048B612
F83907C0001FD81F80EB03FC48C87E003E157E48153E163F4881A56C5D007C153E007E15
7E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE017FC7FC90383FFFFC010313C0293D7E
A82D>I<EA01F812FFA3120712031201B1EC03FC91380FFF8091383C0FC09138F003E0D9
F9C07F9039FB8001F8140001FF6D7E5BA25BA25BB3A6486C497EB539F07FFFF8A32D3F7E
BE32>I<EA01C0EA07F0487EA56C5AEA01C0C8FCACEA01F8127FA3120712031201B3AC48
7EB512E0A3133D7EBC19>I<1470EB01FCEB03FEA5EB01FCEB00701400AC14FE133FA313
011300147EB3B3A6123C007E137CB413FCA214F8130100FE13F0387803E0383E07C0380F
FF00EA01FC175084BC1C>I<EA01F812FFA3120712031201B292387FFF80A392381FFC00
ED0FE016804BC7FC151C5D5D5DEC03C04AC8FC140E141E143E147F9038F9FF809038FB9F
C0EBFF0F496C7E01FC7FEBF8036E7E816E7E157E8182151F6F7E826F7EA282486C14FEB5
39F03FFFE0A32B3F7EBE30>I<EA01F812FFA3120712031201B3B3B1487EB512F0A3143F
7EBE19>I<2701F803FCEB01FE00FF903B0FFF8007FFC0913B3C0FC01E07E0913BF003E0
7801F02607F9C0D9F0E07F3D03FB8001F9C000FC000101005C01FFD900FF147E4992C7FC
A2495CA2495CB3A6486C496C14FFB528F07FFFF83F13FCA346287EA74B>I<3901F803FC
00FF90380FFF8091383C0FC09138F003E02607F9C07F3A03FB8001F80001130001FF6D7E
5BA25BA25BB3A6486C497EB539F07FFFF8A32D287EA732>I<EB01FE90380FFFC090383F
03F090387C00F8D801F0133E48487F4848EB0F80A24848EB07C0001F15E090C712034815
F0A2007EEC01F8A400FE15FCA9007E15F8A3007F14036C15F0A26C6CEB07E0000F15C06D
130F000715806C6CEB1F006C6C133ED800FC13FC90383F03F090380FFFC0D901FEC7FC26
2A7DA82D>I<3901F807F800FFEB1FFF9138780FC09039F9E003F03A03FB8001F86CB4C7
7E49147E49147FEE3F8049141F17C0A2EE0FE0A317F01607A9EE0FE0A4EE1FC0A2EE3F80
6D15006D5C16FE6D495A9039FB8003F89039F9C007E09039F8F81F80DA3FFEC7FCEC07F0
91C9FCAD487EB512F0A32C3A7EA732>I<3903F00FC000FFEB3FF0ECF0F89038F1C3FC00
071383EA03F33801F70313F6EC01F89038FE0060491300A45BB3A4487EB512F8A31E287E
A723>114 D<90387FC0603903FFF8E03807C03D381E000F481303481301A20070130012
F01560A27EA27EB41400EA7FC013FE383FFFE06C13FC00077F6CEBFF80C66C13C0010713
E0EB003FEC0FF000C01303EC01F814007E1578A27EA27E15F07EEC01E06C14C039F78007
8039F1E01F0038E0FFFC38C01FE01D2A7DA824>I<1318A61338A41378A213F8A2120112
031207001FB512C0B6FCA2D801F8C7FCB3A21560A96C6C13E015C0A2EB7E0190383F0380
90381F8700EB07FEEB01F81B397EB723>I<D801F814FC00FF147FA30007140300031401
00011400B3A51501A3150312006D1307ED0EFE017C497E6D4913F890381F80F0903807FF
E00100903800FC002D297EA732>I<B539C007FFE0A32707FC000113006C48EB007C1678
000115707F00001560A2017E5CA2017F13016D5CA26D6C48C7FCA26E5A010F1306A26D6C
5AA2ECF01C01031318A26D6C5AA2ECFC7001001360A2EC7EC0A2147F6E5AA26EC8FCA314
0EA22B287EA630>I<B53B87FFFC03FFF0A33D0FFC003FE0007FC0D807F06D48EB3F0000
036E48131E70131C6C7E03071418826C6C010F5CA26D6E1370017E01191460A2017F6E13
E06D01305CA20280EBFC01011FD9607C5BA290280FC0E07E03C7FCEDC03EA2D907E1EB3F
06ED801F1786D903F3148CED000F17CCD901FEEB07D8A217F86D486D5AA302786D5AA302
306D5A3C287EA641>I<3B7FFFC00FFFE0A3000390390007FE00C6EC03F86D14E06D5C02
805B6D6C48C7FC010F130E903807E00C6E5A903803F83801015B6D6C5A6E5AEC7F80143F
141F6E7E81141FEC3BF0EC71F8ECE1FCECC0FE903801807E01037FD907007F010E6D7E01
0C130F011C6D7E498001F86D7E000181D80FFC497EB590381FFFF8A32D277FA630>I<B5
39C007FFE0A32707FC000113006C48EB007C0001157816707F000015607F017E5CA26D49
5AA2EC8003011F91C7FCA290380FC006A2ECE00E0107130CA26D6C5AA2ECF83801011330
14FC01005BA2EC7EC0A2147F6E5AA26EC8FCA3140EA2140CA2141C1418A25CA25C123800
7C13E000FE5B13015C49C9FCEA7C07EA700EEA383CEA1FF8EA07E02B3A7EA630>I<001F
B61280A29038E0007F90C71300001E14FE001C495A140300185C0038495A4A5A0030131F
5D4A5A4AC7FCA2C712FE495A13035C495A495A131F9138C00180EB3F80EB7F00A213FE48
5A000314035B48481400485A001F5C495B485A48C7123F4849B4FC90B6FCA221277EA628
>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe ecbx1095 10.95 28
/Fe 28 120 df<ED7FF891380FFFFE027F6D7E903A01FFC01FC0903A07FE0003E0D91FFC
497ED93FF0EB1FF84948133FA2495A4C7E48496D5AA3705A705AEE038093C8FCA6923803
FFFCB8FCA40001903880000FB3AE007FD9FE03B512F0A434407EBF3A>28
D<16F84B7EA24B7EA34B7EA24B7FA34B7FA24B7FA34B7F157D03FD7F15F8A2020180EDF0
7F020380EDE03FA2DA07C07F82020F814B7E021F811500824A81023E7F027E81147C8202
FC814A7F0101825C91B7FC4982A2498202C0C7123F83010F834A80011F8391C8FC834983
013E81017E83137C83D801FE83B500FC49B612F8A4453F7CBE4E>65
D<922607FF80131C92B500F8133C020702FE137C023F9138FF80FC91B538003FE1010301
F0EB07F74901C0EB01FF011F90C8FCD93FFC153F4948151F495A4849150F481707484915
035C48170191C9FC481700A2485AA2197C127FA2491700A212FFAC127FA27F193C123FA3
6C7E197C6C1878806C18F86E16F06C6D15016CEF03E06C6DED07C06D6C150FD93FFEED1F
806D6CED3F00010701C014FE6D01F0EB03F8010001FFEB1FF0023F90B512C0020792C7FC
020014F8030713803E407ABE4B>67 D<B912F8A426007FFCC713FC171F170717011700A2
187C187E183EA2181EA4041E131F180FA31800A2163EA2167E16FE150391B5FCA4ECFC03
1500167E163EA2161EA693C8FCAEB712C0A4383E7CBD41>70 D<B812F017FF18E018F828
003FFE00017F9338003FFE94380FFF80837113C019E0A27113F0A319F8A719F0A34D13E0
A219C04D13804D1300EF3FFE4CB45A91B712F018C005FCC7FC4ACAFCB3A6B77EA43D3E7D
BD47>80 D<B812C017FCEFFF8018F028003FFE000113FC9338003FFE717E05077F85717F
A2717FA285A761A24D5BA24D5B61DD1FFEC8FC4D5A933803FFF091B712C04DC9FCA2913A
FE000FFF80040313E004007F717E84173F84171F84A685A5F20180F203C019C083A27190
38E00780A2B76C6C9038F00F0071EBFC3F9439007FFFFE061F13F8CC13E04A3F7DBD4E>
82 D<903A01FF8001C0011FEBF803017FEBFE0748B6128F489038007FDFD807F8EB0FFF
4848130348487F4848EB007F163F127F49141F160F12FF1607A27FA26D1403A27F01FC91
C7FC13FF6C13F8ECFF8015FC6CECFF806C15E016F86C816C816C816C16806C6C15C0131F
010715E0EB007F020314F0EC001F1503030013F8167F163F12F0161FA2160FA27EA217F0
7E7EEE1FE07E6DEC3FC013E06DEC7F8001FE903801FF003AFEFFE007FED8FC3FB512F8D8
F80F5CD8F003148027E0001FFCC7FC2D407ABE3A>I<003FB912F8A4903BFC007FFC007F
01E0160FD87F80EE03FC90C71501007E1700A2007C187CA20078183CA548181EA5C81600
B3B1011FB712F0A43F3D7CBC48>I<B76C90B61280A426003FFEC96CC7FC193EB3B3A501
1F5FA2806D17FC616D6D1401616D6D4A5A6D16076D6DEC1FC0DA7FF84A5ADA3FFE49B4C8
FC913A0FFFC00FFC020390B55A020015E0031F1480030101F8C9FC493F7DBD50>I<9038
07FF80013F13F048B512FC3903FC03FF2607E00013C0D80FF86D7E001F6E7E7F6F7EA26F
7EA26C5A6C5AEA01C0C8FCA3EC03FF49B5FC130F017F138F3901FFF00F00071380481300
EA1FFC485A127F5B12FF5BA3151FA26D133F127F6D49B4FC273FFC01F713FC391FFE07E3
0007B5128100019038FE007F26001FF890C7FC2E2B7DA932>97 D<EC7FF00103B5FC011F
14C090397FE01FE09039FF8003F0489038000FF8484814FC0007141F485A121F5B123FED
0FF8007FEC07F049EB01C092C7FC12FFAB127FA27FA2003F151E7F001F153E000F153C6D
147C6C6C14F86C90388001F0C69038C003E090397FF00FC0011FB51200010713FC903800
7FE0272B7DA92E>99 D<EE07F8ED07FFA4ED003F161FB0EC7FE0903803FFFC011F13FF90
397FF00FDF9039FFC003FF000390C7FC4848147F000F153F49141F121F485AA2127F5BA3
12FFAA127FA37F123FA2121F6D143F000F157F6C6C14FF6C6C497F6CD98007EBFFE03A00
7FE01F9F90391FFFFE1F010713F89026007FC0EBE00033407DBE3A>I<ECFFE0010713FC
013F13FFD97FE013803A01FF803FC0489038001FE04848EB0FF0484814F8ED07FC485A00
3FEC03FEA3485A16FFA200FF80A390B7FCA301F0C8FCA5127FA36C7E160F121F6D141F00
0F151E6C6C143E0003157C6C6C14F86C9038C003F090397FF01FE0011FB512C00107EBFE
009038007FF0282B7DA92F>I<EC07FCEC7FFF49B512C0903907FE1FE090381FF83F9039
3FF07FF0EB7FE0A2EBFFC0A2481380ED3FE0ED0F8092C7FCABB612E0A400010180C7FCB3
AE007FEBFF80A424407DBF20>I<903A03FF8003F0013F9038F81FFC90B538FE7FFE0003
903801FFFC3A07FC007FE1000F15E04848EB3FF0003FEDF87C49011F1300A2007F81A700
3F5DA26D133F001F5D6C6C495A00075D9039FF01FF80DAFFFEC7FCD80F3F13F801031380
001ECAFCA2121FA37F7F90B6FC6C15F016FC6C15FF17806C16C017E0120F271FC0000113
F04848EB001F48C8EA0FF8160712FE1603A46C15076C16F06D140F6C6CEC1FE06C6CEC3F
C0D80FF8ECFF803B03FF800FFE00C690B512F8011F14C0010101FCC7FC2F3D7DA834>I<
13FFB5FCA412077EB0ED3FF0EDFFFE02036D7EDA0FC07F91391E007FE04A6D7E5C5C4A6D
7E5CA25CA391C7FCB3A5B5D8FC07B512E0A4333F7CBE3A>I<EA01F8487E487E487E4813
80A66C13006C5A6C5A6C5AC8FCA913FFB5FCA412077EB3ADB512F8A415407CBF1D>I<13
FFB5FCA412077EB3B3B1B512FCA4163F7CBE1D>108 D<D801FED93FF049B47E00FFDAFF
FE010713F002039026FF801F13FCDA0FC09039C07E07FE913C1E007FE0F003FF00074990
273FF1E0011380000349ECF3C04AECF7806D486DB4C713C04A5CA24A5CA391C75BB3A5B5
D8FC07B5D8E03F13FFA450297CA857>I<D801FEEB3FF000FFECFFFE02036D7EDA0FC07F
91391E007FE00007496D7E00035B5C6D486D7E5CA25CA391C7FCB3A5B5D8FC07B512E0A4
33297CA83A>I<EC7FF0903803FFFE011FEBFFC090397FE03FF09039FF800FF848496C7E
48486D7E48486D7E48486D1380001F16C0A2003F16E049147F007F16F0A400FF16F8AA00
7F16F0A46C6CECFFE0A2001F16C0000F16806D5B6C6C4913006C6C495A6C6D485A3A007F
E03FF0011FB512C0010791C7FC9038007FF02D2B7DA934>I<01FFEB7FE0B53807FFFC02
1F13FFDA7F0113C09139F8007FF00007496D7E6C496D7E02806D7E8391C77E18808218C0
A38218E0AA18C05EA34C1380A218006E495A6E131F6E5C6E495A6EEBFFE0DA7F035B021F
B5C7FC020713F8020013C092C9FCADB512FCA4333B7DA83A>I<3901FE01FC00FF903807
FF804A13E091383F1FF0143C00079038783FF8000313F014E013FF14C0ED1FF09138800F
E0ED038092C7FCA291C8FCB3A4B6FCA425297DA82B>114 D<90381FF80E48B5123E0007
14FE380FE007381F800148C7FC007E147E007C143E12FC151EA27E7E6D90C7FC13E013FF
6C13FCECFF806C14E06C14F86C80000380C680133F01031480EB000F020113C000F0EB00
7F153F6C141FA2150F7EA26C1580151F6C15006D5B01E0137E9038F803FC00FCB512F0D8
F03F13C026E007FEC7FC222B7DA929>I<EB0780A5130FA4131FA3133F137FA213FF5A12
07001FEBFFFCB6FCA30001EB8000B3A2151EA96C143C14C0A290387FE07890383FF0F090
381FFFE0010713C0010013001F3B7EB928>I<01FFEC07F8B5EB07FFA40007EC003F6C15
1FB3A6163FA3167F6C15FFA26E487F6C913907DFFFE090397FE01F9F90391FFFFE1F0107
13F8010001E0EBE000332A7CA83A>I<B500F890381FFFC0A400030180903803F8006CED
01E06E13036C5E80017F4A5A80160F013F92C7FC6E5B011F141E6E133E010F143C6E137C
010714786E13F86D5C15816D5C15C16DEBC3C015E315E7027F5B15FF6E90C8FCA26E5AA2
6E5AA26E5AA26E5AA26E5A32287EA737>I<B53CF83FFFF801FFFCA4000390C790398000
1F80F10F006E017F5C6C70131E16FF6C6D6E5BA26E48157C017F6F13785DD93FF0D9CFF8
5BA29126F807871301011F03FC5B150FD90FFC903903FE03C0A29126FE1E011307010703
FF5B153E902703FF3C00018FC7FCA203F8EB7F9F6D16DEA26D49EB3FFCA24B131F027F5D
A26E486D5AA24B1307021F5DA26EC76C5A46287EA74B>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 1853 1102 a
 tx@Dict begin tx@NodeDict begin {20.08656 14.61157 173.7487 86.87434
2.73749 } false /N@bprefs 16 {InitRnode } NewNode end end
 1853 1102 a 1853 1102
a
 tx@Dict begin tx@NodeDict begin {20.08656 14.61157 173.7487 86.87434
20.08656 } false /N@prefs 16 {InitRnode } NewNode end end
 1853 1102 a 1853 939 1413 4 v 1853 1220 4 282 v 2298
1026 a Fe(Preferences)p 1881 1055 1356 4 v 1881 1142
a Fd(stu\033)30 b(as)g(needed)p 1881 1170 V 3262 1220
4 282 v 1853 1223 1413 4 v 1853 4484 a
 tx@Dict begin tx@NodeDict begin {43.25388 37.7789 173.7487 86.87434
43.25388 } false /N@posting 16 {InitRnode } NewNode end end
 1853 4484 a 1853
4128 1413 4 v 1853 4794 4 667 v 2389 4215 a Fe(P)m(osting)p
1881 4261 1356 4 v 1972 4354 a Fd(p)s(oster[1]:)h(User)1972
4467 y(date[1]:)g(String)1972 4580 y(sub)5 b(ject[1]:)31
b(String)1972 4693 y(b)s(o)s(dy[1]:)f(String)p 1881 4744
V 3262 4794 4 667 v 1853 4797 1413 4 v 1853 3766 a
 tx@Dict begin tx@NodeDict begin {42.18956 36.71458 173.7487 86.87434
42.18956 } false /N@thread 16 {InitRnode } NewNode end end
 1853
3766 a 1853 3419 1413 4 v 1853 4068 4 649 v 2395 3507
a Fe(Thread)p 1881 3535 1356 4 v 1972 3628 a Fd(name[1]:)h(String)1972
3741 y(user[1]:)g(User)1972 3854 y(date[1]:)g(String)1972
3967 y(p)s(ostings[1..*]:)g([P)m(osting])p 1881 4018
V 3262 4068 4 649 v 1853 4071 1413 4 v 1853 3181 a
 tx@Dict begin tx@NodeDict begin {28.58955 23.11458 173.7487 86.87434
28.58955 } false /N@forum 16 {InitRnode } NewNode end end
 1853
3181 a 1853 2947 1413 4 v 1853 3369 4 423 v 2412 3034
a Fe(F)-9 b(orum)p 1881 3062 1356 4 v 1972 3156 a Fd(name[1]:)31
b(String)1972 3268 y(threads[0..*]:)h([Thread])p 1881
3319 V 3262 3369 4 423 v 1853 3372 1413 4 v -37 3889
a
 tx@Dict begin tx@NodeDict begin {28.58955 23.11458 173.7487 86.87434
28.58955 } false /N@reviewer 16 {InitRnode } NewNode end end
 -37 3889 a -37 3655 1413 4 v -37 4078 4 423 v 460 3743
a Fe(Review)m(er)p -8 3771 1356 4 v 82 3864 a Fd(user[1]:)f(User)82
3977 y(rating[1..*]:)h([])p -8 4028 V 1372 4078 4 423
v -37 4081 1413 4 v -37 3001 a
 tx@Dict begin tx@NodeDict begin {35.38956 29.91458 173.7487 86.87434
35.38956 } false /N@author 16 {InitRnode } NewNode end end
 -37 3001 a -37 2710 1413
4 v -37 3246 4 536 v 505 2798 a Fe(Author)p -8 2826 1356
4 v 82 2919 a Fd(user[1]:)f(User)82 3032 y(isMainAuthor[1]:)h(Bo)s
(olean)82 3145 y(isSp)s(eak)m(er[1]:)f(Bo)s(olean)p -8
3196 V 1372 3246 4 536 v -37 3249 1413 4 v 1853 1705
a
 tx@Dict begin tx@NodeDict begin {50.05388 44.5789 173.7487 86.87434
50.05388 } false /N@paper 16 {InitRnode } NewNode end end
 1853 1705 a 1853 1293 1413 4 v 1853 2072 4 780 v 2425
1381 a Fe(P)m(ap)s(er)p 1881 1427 1356 4 v 1972 1520
a Fd(forum[1]:)g(F)-8 b(orum)1972 1633 y(authors[1..*]:)32
b([Author])1972 1746 y(review)m(ers[1..*]:)g([Review)m(er])1972
1858 y(\034lenameShort[1]:)h(String)1972 1971 y(\034lenameLong[1]:)g
(String)p 1881 2022 V 3262 2072 4 780 v 1853 2075 1413
4 v -37 2458 a
 tx@Dict begin tx@NodeDict begin {26.88657 21.41158 173.7487 86.87434
26.88657 } false /N@role 16 {InitRnode } NewNode end end
 -37 2458 a -37 2238 1413 4 v -37 2632
4 395 v 567 2326 a Fe(Role)p -8 2354 1356 4 v -8 2441
a Fd(Author)55 b(OR)g(Chair)h(OR)f(Review)m(er)-8 2554
y(OR)30 b(Guru)g(OR)g(User)p -8 2582 V 1372 2632 4 395
v -37 2635 1413 4 v -37 1696 a
 tx@Dict begin tx@NodeDict begin {48.98956 43.51459 173.7487 86.87434
48.98956 } false /N@profile 16 {InitRnode } NewNode end end
 -37 1696 a -37 1293 1413
4 v -37 2054 4 762 v 520 1381 a Fe(Pro\034le)p -8 1409
1356 4 v 82 1502 a Fd(pa)m(ymen)m(tInfo[1]:)82 1615 y(hasP)m(aid[1]:)i
(Bo)s(olean)82 1728 y(p)s(ersonalInfo[1]:)f(P)m(ersonalInfo)82
1841 y(preferences[1]:)h(Preferences)82 1954 y(exp)s(ertise[1..*]:)f
([String])p -8 2005 V 1372 2054 4 762 v -37 2057 1413
4 v -37 931 a
 tx@Dict begin tx@NodeDict begin {42.18956 36.71458 173.7487 86.87434
42.18956 } false /N@user 16 {InitRnode } NewNode end end
 -37 931 a -37 584 1413 4 v -37 1233 4 649
v 564 672 a Fe(User)p -8 700 1356 4 v 82 793 a Fd(loginname[1]:)h
(String)82 906 y(passw)m(ord[1]:)g(String)82 1019 y(roles[1..*]:)f
([Role])82 1132 y(pro\034le[1]:)h(Pro\034le)p -8 1183
V 1372 1233 4 649 v -37 1236 1413 4 v 1853 212 a
 tx@Dict begin tx@NodeDict begin {69.38957 63.9146 173.7487 86.87434
69.38957 } false /N@conference 16 {InitRnode } NewNode end end
 1853
212 a 1853 -360 1413 4 v 1853 740 4 1101 v 2307 -273
a Fe(Conference)p 1881 -245 1356 4 v 1972 -152 a Fd(name[1]:)f(String)
1972 -39 y(pathpre\034x[1]:)h(String)1972 74 y(www)m(alias[1]:)g
(String)1972 187 y(topics[0..*]:)f([String])1972 300
y(organization[1]:)i(String)1972 413 y(users[1..*]:)e([User])1972
526 y(fora[0..*]:)g([F)-8 b(orum])1972 639 y(pap)s(ers[0..*]:)31
b([P)m(ap)s(er])p 1881 690 V 3262 740 4 1101 v 1853 743
1413 4 v -37 -126 a
 tx@Dict begin tx@NodeDict begin {28.58955 23.11458 173.7487 86.87434
28.58955 } false /N@cserver 16 {InitRnode } NewNode end end
 -37 -126 a -37 -360 1413 4 v -37
62 4 423 v 272 -273 a Fe(ConferenceServ)m(er)p -8 -245
1356 4 v 82 -152 a Fd(defaultpathpre\034x[1]:)i(String)82
-39 y(conferences)e([1..*]:)g([Conference])p -8 12 V
1372 62 4 423 v -37 65 1413 4 v 235 193 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@author /N@role InitNC { /AngleA 0.  def /AngleB 0.  def 0.3
 0.3  NCCurve  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 235 193 a 235
193 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0.4 1.4 1.5 2. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@reviewer /N@role InitNC { /AngleA 0.  def /AngleB 0.  def 0.4
 0.4  NCCurve  } if end gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore  grestore end
 235 193 a 144 4871 1389 4 v 186 4924 a Fc(0)221
4956 y Fb(Note:)43 b(w)n(e)31 b(write)f Fa([a])h Fb(for)g(an)n(y)f
(collection)h(of)37 b Fa(a)p Fb(s,)32 b(b)r(e)e(it)g(a)h(list,)h(set,)g
(v)n(ector,)f(arra)n(y)-6 b(,)31 b(or)g(whatev)n(er.)47
b(That)31 b(is)f(an)259 5048 y(implemen)n(tation)24 b(detail.)p
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
